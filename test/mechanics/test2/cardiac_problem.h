#ifndef OOMPH_CARDIAC_PROBLEM_HEADER
#define OOMPH_CARDIAC_PROBLEM_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif

//OOMPH-LIB includes
#include <constitutive.h>
#include <generic.h>
#include <solid.h>

#include <algorithm>
#include <string.h>



#include "cardiac_constitutive_laws.h"
#include "cardiac_mesh.h"
#include "cardiac_constitutive_laws.h"
#include "meshes/tetgen_mesh.h"


namespace oomph
{


  /// \short The Problem class for ventricles.
template <class ELEMENT>
class VentricularProblem : public Problem
{

public:

  VentricularProblem();
  ~VentricularProblem() {}

  /// \short Set pressure in left and right ventricle.
  void set_pressure(double lv, double rv);

  /// \short Consitutive law for all elements.
  ActiveConstitutiveLaw<UsykConstitutiveLaw>* constitutive_law_pt;

  /// Document the solution of the problem.
  void doc_solution(DocInfo& doc_info);

  /// \short Make step in time by delta_time.
  virtual void advance_in_time(double delta_time) {
    Simulation_time += delta_time;
  }

  /// \short Set time pointers of active models to global time variable 
  void assign_time_to_elements() {
    unsigned n_element = Ventricular_mesh_pt->nelement();

    for(unsigned i = 0; i < n_element; i++) {

      ELEMENT *el_pt = dynamic_cast<ELEMENT*>(Ventricular_mesh_pt->element_pt(i));

      el_pt->assign_time_to_active_models(&Simulation_time);
    }
  }

private:

  /// \short Create elements for LV and RV endocardial surfaces
  void create_traction_elements();

  /// \short Tetgen ventricular mesh.
  AnisotropicTetMesh<ELEMENT >* Ventricular_mesh_pt;

  /// \short Meshes of traction elements.
  Vector<SolidMesh*> Solid_traction_mesh_pt;

  /// \short IDs of solid mesh boundaries where displacements are pinned.
  Vector<unsigned> Pinned_solid_boundary_id;

  /// \short IDs of solid mesh boundaries which make up the traction interface.
  Vector<unsigned> Solid_traction_boundary_id;
  double Simulation_time;
};


}

#endif


