#! /usr/bin/perl -w

# plotecg.pl plots the ecgs generated by Cardioid and saves them to file.  Each directory
# should contain:
#   - electrode_list.txt : list of electrodes
#   - object.data : simulation parameters
#   - electrode#000123456 : file containing ecg data for each electrode
#
# written by Erik Draeger, LLNL, 12/10/2013
# -r2177 revisions by Jonathan Cranford, LLNL, 11/2/2015 (altered from svn Cardioid/EP/tools/plotECG/plotecg.pl r2175)
#   	-added capability to specify which heart beat # is the first heart beat in the graph, rather than always showing the $graphNBeats final heart beats of simulation
#  	 -added extra checks for confirming $dt, $units, $printRate, and $BCL are same between regular and control directories
#   	-added various other automated error checking functionality
#  	 -added ability to print to title what beat(s) showing in graph

@interactive = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);  # 0 indicates plot directly to file, 1 indicates spawn xmgrace windows instead of plotting to file.  #interactive should be equal to #electrodeName, with dummy 0's added where leads are created from subtracting electrodes between two indices
$startBeat = 1;	   # beat number to start at in graphs
$graphNBeats = 1;  # number of BCLs to show in each graph
$plotControl = 1;  # if control directory is symlinked in ecgdir, include on plot
$pout = 0;	   # 0 if not want to print out debug information (prettier), 1 if want to print out debug information (messier)

if ($#ARGV < 0) {
   print "syntax:  plotecg.pl [directories with simulation and ecg data]\n";
   exit;
}

# input filenames
$object = "object.data";
$electrodeList = "electrode_list.txt";
$electrodeBase = "electrode\#";

# ecg electrode map
$electrodeName[0] = "V1";
$electrodeName[1] = "V2";
$electrodeName[2] = "V3";
$electrodeName[3] = "V4";
$electrodeName[4] = "V5";
$electrodeName[5] = "V6";
$electrodeName[6] = "I";
$electrodeName[7] = "I";
$electrodeName[8] = "vec1";
$electrodeName[9] = "vec2";
$electrodeName[10] = "vec3";
$electrodeName[11] = "vec4";

if ($pout)
{
	print "#electrodeName = $#electrodeName and #interactive = $#interactive\n";
}

ECGDIR: foreach $ecgdir (@ARGV[0..$#ARGV]) {  

   print "Processing $ecgdir...\n";
   if (-e $ecgdir)
   {
      # if control dir is symlinked, include on plot
      $controldir = "$ecgdir/control";
      $controlFound = 0;
      if (-e $controldir) 
      {
         $controlFound = 1;
         if ($plotControl == 1)
         {
            print "Control directory found, will include on plots.\n\n";
         }   
      }

      # read dt and units parameters from object.data file in regular directory
      ($dt,$unit) = grabTimestep("$ecgdir/$object");
      if ($dt < 0)
      {
         print "Error reading time step from $object.\n";
         next ECGDIR;
      }
      if ($unit eq "us")
      {
         $unit = "ms";
         $dt /= 1000;
      }
      elsif ($unit eq "s")
      {
         $unit = "ms";
         $dt *= 1000;
      }
      if (-e $controldir)
      {
      	 # read dt and units parameters from object.data file in control directory
      	 ($dtC,$unitC) = grabTimestep("$controldir/$object");
      	 if ($dtC < 0)
      	 {
             print "Error reading time step from $controldir/$object.\n";
             next ECGDIR;
         }
         if ($unitC eq "us")
         {
            $unitC = "ms";
            $dtC /= 1000;
         }
         elsif ($unitC eq "s")
         {
            $unitC = "ms";
            $dtC *= 1000;
         }
	if ($dt != $dtC)
        {
      	   print "\nERROR:  dt in regular directory ($dt) and control directory ($dtC) do not match, probably comparing apples to oranges\n";
	   print "Fatal error, exiting\n";
	   exit 1;
        }
        if ($unit ne $unitC)
        {
           print "\nERROR:  units in regular directory ($unit) and control directory ($unitC) do not match, probably comparing apples to oranges\n";
	   print "Fatal error, exiting\n";
	   exit 1;
        }
      }
      
       # read printRate parameter from object.data in regular directory
      $printRate = grabECGPrintRate("$ecgdir/$object");
      if ($printRate < 0)
      {
         print "Error reading ECG print rate from $object.\n";
         next ECGDIR;
      }
      if (-e $controldir)
      {
         # read printRate parameter from object.data in control directory
         $printRateC = grabECGPrintRate("$controldir/$object");
         if ($printRateC < 0)
         {
            print "Error reading ECG print rate from $controldir/$object.\n";
            next ECGDIR;
         }
	if ($printRate != $printRateC)
        {
       	    print "\nERROR:  printRate in regular directory ($printRate) and control directory ($printRateC) do not match, probably comparing apples to oranges\n";
	    print "Fatal error, exiting\n";
	    exit 1;
        }
      }
     
       # read BCL parameter from object.data in regular directory
      $BCL = grabMinStimPeriod("$ecgdir/$object");     # BCL should be in ms
      if ($BCL < 0)
      {
         print "Error reading BCL from $object.\n";
         next ECGDIR;
      }
      if (-e $controldir)
      {
      	$BCLC = grabMinStimPeriod("$ controldir/$object");     # BCL should be in ms
        if ($BCLC < 0)
        {
           print "Error reading BCL from $controldir/$object.\n";
           next ECGDIR;
        }
        if ($BCL != $BCLC)
        {
           print "\nERROR:  BCL in regular directory ($BCL) and control directory ($BCLC) do not match, probably comparing apples to oranges\n";
           print "Fatal error, exiting\n";
           exit 1;
        }
      }

      $rescaleFactor = $printRate*$dt;
      if (-e $controldir)
      {
        $rescaleFactorC = $printRateC*$dtC;
      }
      
      
      # open electrode files, count lines for regular directory
      $electrodeListFull = "$ecgdir/$electrodeList";
      if (-e $electrodeListFull)
      {


         open ELIST,$electrodeListFull or die "Error opening $electrodeListFull: $!\n";;
         $ecnt = 0;
         while ($line=<ELIST>)
         {
            chomp $line;
            $enum = $line;
            $efiles[$ecnt] = sprintf("$ecgdir/$electrodeBase%9.9i",$enum);
#            $cfiles[$ecnt]  = sprintf("$controldir/$electrodeBase%9.9i",$enum);
            if (-e $efiles[$ecnt])
            {
               open ETRODE,$efiles[$ecnt];
               $linecnt = 0;
               while (<ETRODE>)
               {
                  $linecnt++;
               }
               close ETRODE;
               $elen[$ecnt] = $linecnt;
	       if ($pout)
	       {
	       	 print "elen[$ecnt] = $elen[$ecnt]   (FYI elen[$ecnt] is the total # of recorded time steps for the current electrode # $ecnt, mulitply by $rescaleFactor to get last recorded time in ms in simulation)\n";
	       }
               $ecnt++;
            }
            else
            {
               print "Error:  file $efiles[$ecnt] not found!\n";
            }
         }
	 if ($pout)
	 {
	   print "\n";
	 }
         close ELIST;
      }
      else
      {
         print "Error:  file $electrodeListFull not found!\n";
         next ECGDIR;
      }
      
      if (-e $controldir)
      {
      	# open electrode files, count lines for control directory
        $electrodeListFullC = "$controldir/$electrodeList";
        if (-e $electrodeListFullC)
        {


           open ELIST,$electrodeListFullC or die "Error opening $electrodeListFullC: $!\n";;
           $ccnt = 0;
           while ($line=<ELIST>)
           {
              chomp $line;
              $cnum = $line;
              $cfiles[$ccnt]  = sprintf("$controldir/$electrodeBase%9.9i",$cnum);
              if (-e $cfiles[$ccnt])
              {
                 open ETRODE,$cfiles[$ccnt];
                 $linecnt = 0;
                 while (<ETRODE>)
                 {
                    $linecnt++;
                 }
                 close ETRODE;
                 $clen[$ccnt] = $linecnt;
		 if ($pout)
		 {
	         	print "clen[$ccnt] = $clen[$ccnt] (FYI elen[$ecnt] is the total # of recorded time steps for the current electrode # $ecnt, mulitply by $rescaleFactor to get last recorded time in ms in simulation)\n";
		 }
                 $ccnt++;
              }
              else
              {
                 print "Error:  file $cfiles[$ccnt] not found!\n";
              }
           }
	   if ($pout)
	   {
	     print "\n";
	   }
           close ELIST;
        }
        else
        {
           print "Error:  file $electrodeListFullC not found!\n";
           next ECGDIR;
        }
      }
      

#      # for each lead V1-V6, plot last two beats in ecg file on top of each other
#      for (my $ii=0; $ii<6; $ii++)
#      {
#         $nbeats = int $elen[$ii]*$rescaleFactor/$BCL;
#         @ecgsets = ($ii,$nbeats-1,$graphNBeats,$ii,$nbeats,$graphNBeats);
#         plotElectrodeGraceBatch(@ecgsets);
#      }

      # for each lead V1-V6, plot specified beat(s) in ecg file
      for (my $ii=0; $ii<6; $ii++)
      {
         $nbeats = int $elen[$ii]*$rescaleFactor/$BCL;
	 if (-e $controldir)
	 {
	     $nbeatsC = int $clen[$ii]*$rescaleFactorC/$BCLC;
	 }
         if ( ($graphNBeats > ($nbeats-$startBeat+1)) && $startBeat != 1) {
              print "\nERROR in regular directory:  \$graphNBeats+\$startBeat-1 must be <= \$nbeats!\n";
	      print "Current state is \$graphNBeats=$graphNBeats, \$startBeat=$startBeat, \$nbeats=$nbeats\n";
              print "Fatal error, exiting\n";
      	      exit 1;
         }
         if (-e $controldir)
         {
           if ( ($graphNBeats > ($nbeatsC-$startBeat+1)) && $startBeat != 1) {
       	     print "\nERROR in control directory:  \$graphNBeats+\$startBeat-1 must be <= \$nbeatsC!\n";
  	     print "Current state is \$graphNBeats=$graphNBeats, \$startBeat=$startBeat, \$nbeatsC=$nbeatsC\n";
             print "Fatal error, exiting\n";
      	     exit 1;
           }
         }
         @ecgsets = ($ii,$nbeats,$graphNBeats);
         plotElectrodeGraceBatch(@ecgsets);
      }

      # calculate difference of leads 7 and 8
#      $nbeats = int $elen[6]*$rescaleFactor/$BCL;
#      @ecgsets = (-6,$nbeats-1,$graphNBeats,-7,$nbeats,$graphNBeats);
#      plotElectrodeGraceBatch(@ecgsets);      

      # calculate difference of leads 7 and 8
      $nbeats = int $elen[6]*$rescaleFactor/$BCL;
      if (-e $controldir)
      {
	 $nbeatsC = int $clen[6]*$rescaleFactorC/$BCLC;
      }
      if ( ($graphNBeats > ($nbeats-$startBeat+1)) && $startBeat != 1) {
              print "\nERROR in regular directory:  \$graphNBeats+\$startBeat-1 must be <= \$nbeats!\n";
	      print "Current state is \$graphNBeats=$graphNBeats, \$startBeat=$startBeat, \$nbeats=$nbeats\n";
              print "Fatal error, exiting\n";
      	      exit 1;
      }
      if (-e $controldir)
      {
           if ( ($graphNBeats > ($nbeatsC-$startBeat+1)) && $startBeat != 1) {
       	     print "\nERROR in control directory:  \$graphNBeats+\$startBeat-1 must be <= \$nbeatsC!\n";
  	     print "Current state is \$graphNBeats=$graphNBeats, \$startBeat=$startBeat, \$nbeatsC=$nbeatsC\n";
             print "Fatal error, exiting\n";
      	     exit 1;
           }
      }
      @ecgsets = (-6,$nbeats,$graphNBeats,-7,$nbeats,$graphNBeats);
      plotElectrodeGraceBatch(@ecgsets);      

#      for (my $ii=8; $ii<$ecnt; $ii++)
#      {
#         $nbeats = int $elen[$ii]*$rescaleFactor/$BCL;
#         @ecgsets = ($ii,$nbeats-1,$graphNBeats,$ii,$nbeats,$graphNBeats);
#         plotElectrodeGraceBatch(@ecgsets);
#      }

      # print last of the leads
      for (my $ii=8; $ii<$ecnt; $ii++)
      {
         $nbeats = int $elen[$ii]*$rescaleFactor/$BCL;
	 if (-e $controldir)
	 {
	     $nbeatsC = int $clen[$ii]*$rescaleFactorC/$BCLC;
	 }
         if ( ($graphNBeats > ($nbeats-$startBeat+1)) && $startBeat != 1) {
              print "\nERROR in regular directory:  \$graphNBeats+\$startBeat-1 must be <= \$nbeats!\n";
	      print "Current state is \$graphNBeats=$graphNBeats, \$startBeat=$startBeat, \$nbeats=$nbeats\n";
              print "Fatal error, exiting\n";
      	      exit 1;
         }
         if (-e $controldir)
         {
           if ( ($graphNBeats > ($nbeatsC-$startBeat+1)) && $startBeat != 1) {
       	     print "\nERROR in control directory:  \$graphNBeats+\$startBeat-1 must be <= \$nbeatsC!\n";
  	     print "Current state is \$graphNBeats=$graphNBeats, \$startBeat=$startBeat, \$nbeatsC=$nbeatsC\n";
             print "Fatal error, exiting\n";
      	     exit 1;
           }
         }
         @ecgsets = ($ii,$nbeats,$graphNBeats);
         plotElectrodeGraceBatch(@ecgsets);
      }
   }
   else
   {
      print "Error:  directory $ecgdir not found!\n";
      #exit;
   }
}

#################################################################################
sub grabTimestep
{
   my ($object) = @_;
   my $val = -1;
   my $unit = "";
   open OBJ,$object;
   while ($line = <OBJ>)
   {
      @data = split ' ',$line;
      if ($#data > 0)
      {
         if ($data[0] eq 'dt')
         {
            $val = $data[2];
            $unit = $data[3];         
            $unit =~ s/\;//g;  # remove semicolon
         }
      }
   }
   return ($val,$unit);
}

#################################################################################
sub grabECGPrintRate
{
   my ($object) = @_;
   my $val = -1;
   open OBJ,$object;
   $inSensor = 0;
   while ($line = <OBJ>)
   {
      @data = split ' ',$line;
      if ($#data > 1)
      {
         if ($data[0] eq 'method' && $data[2] =~ "VoronoiCoarsening")
         {
            $inSensor = 1;
         }
         if ($inSensor == 1)
         {
            if ($data[0] eq '}') { $inSensor = 0; }
            if ($data[0] eq 'printRate')
            {
               $val = $data[2];
               $val =~ s/\;//g;  # remove semicolon
            }
         }
      }
   }
   return ($val);
}

#################################################################################
sub grabMinStimPeriod
{
   my ($object) = @_;
   my $val = -1;
   open OBJ,$object;
   $inStimulus = 0;
   while ($line = <OBJ>)
   {
      @data = split ' ',$line;
      if ($#data > 0)
      {
         if ($data[1] eq 'STIMULUS')
         {
            $inStimulus = 1;
         }
         if ($inStimulus == 1)
         {
            if ($data[0] eq '}') { $inStimulus = 0; }
            elsif ($data[0] eq 'period')
            {
               $data[2] =~ s/\;//g;  # remove semicolon
               if ($data[2] < $val || $val < 0)
               {
                  $val = $data[2];
               }
            }
         }
      }
   }
   return ($val);
}

#################################################################################
sub plotElectrodeGraceBatch
{
   my $linewidth = 3.0;    # line width of ecg curve
   my $controlline = 3.0;  # line width of control curve, if found
   my $textsize = 2.0;
   my $subtextsize = 0.8;  # text size for subtitle
   my $legsize = 0.8;	   # text size for legend
   my $xtickmajor = $BCL*$graphNBeats/5;		# only want 5 major ticks regardless of how many beats graphing

   my @inputsets = @_;
   my $difference = 0;
   my $plotnum = abs $inputsets[0];

   my $fulldir = `pwd`;
   chomp $fulldir;
   $fulldir = join '',$fulldir,'/',$ecgdir;
   my @dirsplit = split '/',$fulldir;
   my $thisdir = $dirsplit[$#dirsplit];
   if ($thisdir eq '.')
   {
       $thisdir = $dirsplit[$#dirsplit-1];
   }

   my $ncurves = ($#inputsets+1)/3;
   if ($pout)
   {
     print "nbeats = $nbeats\t #inputsets = $#inputsets\t ncurves = $ncurves\t plotnum = $plotnum\n";
   }
   my $filebase = "$ecgdir/ecg-$thisdir";
   for (my $ii=0; $ii<$ncurves; $ii++)
   {
      my $leadnum = $inputsets[3*$ii];
      if ($leadnum < 0)
      {
         $leadnum *= -1;
         $inputsets[3*$ii] *= -1;
         if ($ncurves == 2)
         {
            $difference = 1;
         }
      }
      my $leadname = $electrodeName[$leadnum];
      $filebase = join '-',$filebase,$leadname;
   }

   my $batchfile = join '',$filebase,'.bat';
   open BATCH,">$batchfile";
   print BATCH "\# xmgrace batch file for plotting ecg data\n\n";
   print BATCH "\n";

   if ($difference == 1)
   {
      # if beatnum is the same for both sets, just show one curve
      if ($inputsets[1] == $inputsets[4])
      {
         $ncurves--;
      }
      my $lead1 = $inputsets[0];
      my $ecgfile1 = $efiles[$lead1];
      my $lead2 = $inputsets[3];
      my $ecgfile2 = $efiles[$lead2];
      $diffFile = join '',$ecgdir,'/electrode_lead1.dat';
      open ECG1,$ecgfile1;
      open ECG2,$ecgfile2;
      open ECGDIFF,">$diffFile";
      while (my $line1 = <ECG1>)
      {
         my $line2 = <ECG2>;
         chomp $line1;
         chomp $line2;
         my $diffval = $line2 - $line1;
         print ECGDIFF "$diffval\n";
      }
      close ECGDIFF;
      close ECG1;
      close ECG2;

      if ($controlFound == 1 && $plotControl == 1)
      {
         my $ecgfile1 = $cfiles[$lead1];
         my $ecgfile2 = $cfiles[$lead2];
         $diffFileControl = join '',$ecgdir,'/electrode_lead1.control.dat';
         open ECG1,$ecgfile1;
         open ECG2,$ecgfile2;
         open ECGDIFF,">$diffFileControl";
         while (my $line1 = <ECG1>)
         {
            my $line2 = <ECG2>;
            chomp $line1;
            chomp $line2;
            my $diffval = $line2 - $line1;
            print ECGDIFF "$diffval\n";
         }
         close ECGDIFF;
         close ECG1;
         close ECG2;
      }
   }

   # format each set
   my $xmgrargs = '';
   my $xmax = 0;
   my $xmin = 0;
   for (my $ii=0; $ii<$ncurves; $ii++)
   {
      my $leadnum = $inputsets[3*$ii];
      my $leadname = $electrodeName[$leadnum];
      my $beatnum = $inputsets[3*$ii+1];
      my $nbeatsToPlot = $inputsets[3*$ii+2];

      if ($beatnum <= 1)
      {
      	$xmin = 0;
	$xmax = $BCL;
      }
      else
      {
      	$xmin = ($startBeat-1)*$BCL;
    	if ($xmin < 0) { $xmin = 0.0; }

      	my $tmpmax = $BCL*$nbeatsToPlot;
      	if ($tmpmax > $xmax) { $xmax = $tmpmax; }
      }
      
      print BATCH "\# format data (multiply by dt to rescale data from steps to seconds)\n";
      print BATCH "s$ii.x = s$ii.x + 1\n";
      print BATCH "s$ii.x = s$ii.x * $rescaleFactor\n";
      print BATCH "s$ii.x = s$ii.x - $xmin\n";
      print BATCH "s$ii legend \"lead $leadname, regular directory\"\n";
      print BATCH "s$ii line linewidth $linewidth\n";
      print BATCH "s$ii errorbar linewidth $linewidth\n";
      print BATCH "s$ii errorbar riser linewidth $linewidth\n";

      if ($difference == 1)
      {
         $xmgrargs = join ' ',$xmgrargs,'-block',$diffFile,'-bxy index:1';
      }
      else
      {
         $xmgrargs = join ' ',$xmgrargs,'-block',$efiles[$leadnum],'-bxy index:1';
      }
   }

   if ($controlFound == 1 && $plotControl == 1)
   {
      my $leadnum = $inputsets[0];
      my $leadname = $electrodeName[$leadnum];
      my $beatnum = $inputsets[1];
      my $nbeatsToPlot = $inputsets[2];

      if ($beatnum <= 1)
      {
      	$xmin = 0;
	$xmax = $BCL;
      }
      else
      {
      	my $xmin = ($startBeat-1)*$BCL;
	
      	my $tmpmax = $BCL*$nbeatsToPlot;
      	if ($tmpmax > $xmax) { $xmax = $tmpmax; }
      }	
      
      print BATCH "\# format data (multiply by dt to rescale data from steps to seconds)\n";
      print BATCH "s$ncurves.x = s$ncurves.x + 1\n";
      print BATCH "s$ncurves.x = s$ncurves.x * $rescaleFactor\n";
      print BATCH "s$ncurves.x = s$ncurves.x - $xmin\n";
      print BATCH "s$ncurves legend \"lead $leadname, control directory\"\n";
      print BATCH "s$ncurves line linewidth $controlline\n";
      print BATCH "s$ncurves errorbar linewidth $controlline\n";
      print BATCH "s$ncurves errorbar riser linewidth $controlline\n";
      print BATCH "s$ncurves color \"blue\"\n";

      if ($difference == 1)
      {
         $xmgrargs = join ' ',$xmgrargs,'-block',$diffFileControl,'-bxy index:1';
      }
      else
      {
         $xmgrargs = join ' ',$xmgrargs,'-block',$cfiles[$leadnum],'-bxy index:1';
      }
   }

   print BATCH "legend 0.57, 0.88\n";
   print BATCH "legend char size $legsize\n";
   print BATCH "\n";
   print BATCH "\# format axes\n";
   print BATCH "\n";
   print BATCH "title \"Showing $graphNBeats heart beat(s), starting at heart beat # $startBeat\"\n";
   print BATCH "subtitle \"$fulldir\"\n";
   print BATCH "subtitle size $subtextsize\n";
   print BATCH "xaxis label \"time ( $unit )\"\n";
   print BATCH "xaxis  label char size $textsize\n";
   print BATCH "xaxis  tick major 100\n";
   print BATCH "xaxis  tick minor ticks 4\n";
   print BATCH "\n";
   print BATCH "yaxis label \"ecg (mV)\"\n";
   print BATCH "yaxis  label char size $textsize\n";
   print BATCH "yaxis  tick minor ticks 4\n";
   print BATCH "\n";
   print BATCH "\# line widths\n";
   print BATCH "xaxis  tick major $xtickmajor\n";
   print BATCH "xaxis bar linewidth $linewidth\n";
   print BATCH "xaxis tick major linewidth $linewidth\n";
   print BATCH "xaxis tick minor linewidth $linewidth\n";
   print BATCH "yaxis bar linewidth $linewidth\n";
   print BATCH "yaxis tick major linewidth $linewidth\n";
   print BATCH "yaxis tick minor linewidth $linewidth\n";
   print BATCH "frame linewidth $linewidth\n";
   print BATCH "\n";
   print BATCH "\# set scale\n";
   print BATCH "world xmin 0\n";
   print BATCH "world xmax $xmax\n";
   print BATCH "autoscale onread yaxes\n";
   print BATCH "page size 960, 960\n";
   print BATCH "view 0.13, 0.13, .9, .90\n";
   print BATCH "\n";
   close BATCH;

   $pngfile = join '',$filebase,'.png';

   #print "ncurves = $ncurves, xmgrargs = $xmgrargs\n";

   if ($interactive[$plotnum] == 1)
   {
      system("xmgrace $xmgrargs -batch $batchfile");
   }
   else
   {
      system("xmgrace $xmgrargs -batch $batchfile -nosafe -hardcopy -printfile $pngfile -hdevice PNG");
   }

   unlink($batchfile);

}
