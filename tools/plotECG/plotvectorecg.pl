#! /usr/bin/perl -w

# plotvectorecg.pl plots the ecgs generated by Cardioid and saves them to file.
# Each directory should contain:
#   - electrode_list.txt : list of electrodes
#   - object.data : simulation parameters
#   - electrode#000123456 : file containing ecg data for each electrode
#
# script is currently set to plot the last beat, that can be changed by editing
# the argument to plotVectorECGGraceBatch.
#
# written by Erik Draeger, LLNL, 02/11/2014

$interactive = 0;  # set to 1 to spawn xmgrace windows instead of plotting to file
$graphNBeats = 1;  # number of BCLs to show in each graph
$plotControl = 1;  # if control directory is symlinked in ecgdir, include on plot

if ($#ARGV < 0) {
   print "syntax:  plotvectorecg.pl [directories with simulation and ecg data]\n";
   exit;
}

# input filenames
$object = "object.data";
$electrodeList = "electrode_list.txt";
$electrodeBase = "electrode\#";

# ecg electrode map
$electrodeName[0] = "V1";
$electrodeName[1] = "V2";
$electrodeName[2] = "V3";
$electrodeName[3] = "V4";
$electrodeName[4] = "V5";
$electrodeName[5] = "V6";
$electrodeName[6] = "I";
$electrodeName[7] = "I";
$electrodeName[8] = "vec1";
$electrodeName[9] = "vec2";
$electrodeName[10] = "vec3";
$electrodeName[11] = "vec4";

ECGDIR: foreach $ecgdir (@ARGV[0..$#ARGV]) {  

   print "Processing $ecgdir...\n";
   if (-e $ecgdir)
   {
      # if control dir is symlinked, include on plot
      $controldir = "$ecgdir/control";
      $controlFound = 0;
      if (-e $controldir) 
      {
         $controlFound = 1;
         if ($plotControl == 1)
         {
            print "Control directory found, will include on plots.\n";
         }   
      }

      # read simulation parameters from object.data file
      ($dt,$unit) = grabTimestep("$ecgdir/$object");
      if ($dt < 0)
      {
         print "Error reading time step from $object.\n";
         next ECGDIR;
      }
      if ($unit eq "us")
      {
         $unit = "ms";
         $dt /= 1000;
      }
      elsif ($unit eq "s")
      {
         $unit = "ms";
         $dt *= 1000;
      }
      $printRate = grabECGPrintRate("$ecgdir/$object");
      if ($printRate < 0)
      {
         print "Error reading ECG print rate from $object.\n";
         next ECGDIR;
      }

      $BCL = grabMinStimPeriod("$ecgdir/$object");     # BCL should be in ms
      if ($BCL < 0)
      {
         print "Error reading BCL from $object.\n";
         next ECGDIR;
      }

      $rescaleFactor = $printRate*$dt;

      print "rescaleFactor = $rescaleFactor, printRate = $printRate, dt = $dt\n";
      
      # open electrode files, count lines
      $electrodeListFull = "$ecgdir/$electrodeList";
      if (-e $electrodeListFull)
      {
         open ELIST,$electrodeListFull or die "Error opening $electrodeListFull: $!\n";;
         $ecnt = 0;
         while ($line=<ELIST>)
         {
            chomp $line;
            $enum = $line;
            $efiles[$ecnt] = sprintf("$ecgdir/$electrodeBase%9.9i",$enum);
            $cfiles[$ecnt]  = sprintf("$controldir/$electrodeBase%9.9i",$enum);
            if (-e $efiles[$ecnt])
            {
               open ETRODE,$efiles[$ecnt];
               $linecnt = 0;
               while (<ETRODE>)
               {
                  $linecnt++;
               }
               close ETRODE;
               $elen[$ecnt] = $linecnt;
               $ecnt++;
            }
            else
            {
               print "Error:  file $efiles[$ecnt] not found!\n";
            }
         }
         close ELIST;
      }
      else
      {
         print "Error:  file $electrodeListFull not found!\n";
         next ECGDIR;
      }

      if ($ecnt != $#electrodeName+1)
      {
         print "Error: $electrodeListFull does not contain the expected number of leads for a vector ecg!\n";
         exit;
      }

      $nbeats = int $elen[0]*$rescaleFactor/$BCL;
      @ecgsets = ($nbeats-1,$graphNBeats);
      plotVectorECGGraceBatch(@ecgsets);

   }
   else
   {
      print "Error:  directory $ecgdir not found!\n";
      #exit;
   }
}

#################################################################################
sub grabTimestep
{
   my ($object) = @_;
   my $val = -1;
   open OBJ,$object;
   while ($line = <OBJ>)
   {
      @data = split ' ',$line;
      if ($#data > 0)
      {
         if ($data[0] eq 'dt')
         {
            $val = $data[2];
            $unit = $data[3];         
            $unit =~ s/\;//g;  # remove semicolon
         }
      }
   }
   return ($val,$unit);
}

#################################################################################
sub grabECGPrintRate
{
   my ($object) = @_;
   my $val = -1;
   open OBJ,$object;
   $inSensor = 0;
   while ($line = <OBJ>)
   {
      @data = split ' ',$line;
      if ($#data > 1)
      {
         if ($data[0] eq 'method' && $data[2] =~ "VoronoiCoarsening")
         {
            $inSensor = 1;
         }
         if ($inSensor == 1)
         {
            if ($data[0] eq '}') { $inSensor = 0; }
            if ($data[0] eq 'printRate')
            {
               $val = $data[2];
               $val =~ s/\;//g;  # remove semicolon
            }
         }
      }
   }
   return ($val);
}

#################################################################################
sub grabMinStimPeriod
{
   my ($object) = @_;
   my $val = -1;
   open OBJ,$object;
   $inStimulus = 0;
   while ($line = <OBJ>)
   {
      @data = split ' ',$line;
      if ($#data > 0)
      {
         if ($data[1] eq 'STIMULUS')
         {
            $inStimulus = 1;
         }
         if ($inStimulus == 1)
         {
            if ($data[0] eq '}') { $inStimulus = 0; }
            elsif ($data[0] eq 'period')
            {
               $data[2] =~ s/\;//g;  # remove semicolon
               if ($data[2] < $val || $val < 0)
               {
                  $val = $data[2];
               }
            }
         }
      }
   }
   return ($val);
}

#################################################################################
sub plotVectorECGGraceBatch
{

   # currently hardwired to assume electrode[8] = vec1, 9 = vec2, 10 = vec3, 
   # 11 = vec4

   my $linewidth = 3.0;    # line width of ecg curve
   my $controlline = 3.0;  # line width of control curve, if found
   my $textsize = 1.0;
   my $pagesize = 800;

   my @inputpar = @_;

   my $beatnum = $inputpar[0];
   my $nbeatsToPlot = $inputpar[1];
   my $dataStart = ($beatnum-$nbeatsToPlot)*$BCL/$rescaleFactor;
   my $dataEnd = $beatnum*$BCL/$rescaleFactor;

#ewd
   if ($dataStart < 0) { $dataStart = 0; }
   if ($dataEnd < 0) { $dataEnd = $BCL/$rescaleFactor; }


   my $fulldir = `pwd`;
   chomp $fulldir;
   $fulldir = join '',$fulldir,'/',$ecgdir;
   my @dirsplit = split '/',$fulldir;
   my $thisdir = $dirsplit[$#dirsplit];
   if ($thisdir eq '.')
   {
       $thisdir = $dirsplit[$#dirsplit-1];
   }

   # compute x, y, and z data by taking differences of ecg leads
   my $ecgfile1 = $efiles[8];
   my $ecgfile2 = $efiles[9];
   my $ecgfile3 = $efiles[10];
   my $ecgfile4 = $efiles[11];
   $diffFile = join '',$ecgdir,'/electrode_vecg_xyz.dat';
   open ECG1,$ecgfile1;
   open ECG2,$ecgfile2;
   open ECG3,$ecgfile3;
   open ECG4,$ecgfile4;
   open ECGDIFF,">$diffFile";
   $dcnt = 0;
   while (my $line1 = <ECG1>)
   {
      my $line2 = <ECG2>;
      my $line3 = <ECG3>;
      my $line4 = <ECG4>;
      chomp $line1;
      chomp $line2;
      chomp $line3;
      chomp $line4;
      my $xval = $line2 - $line4;
      my $yval = $line2 - $line1;
      my $zval = $line2 - $line3;
      if ($dcnt >= $dataStart && $dcnt <= $dataEnd)
      {
         print ECGDIFF "$xval   $yval   $zval\n";
      }
      $dcnt++;
   }
   close ECGDIFF;
   close ECG1;
   close ECG2;
   close ECG3;
   close ECG4;

   if ($controlFound == 1 && $plotControl == 1)
   {
      my $ecgfile1 = $cfiles[8];
      my $ecgfile2 = $cfiles[9];
      my $ecgfile3 = $cfiles[10];
      my $ecgfile4 = $cfiles[11];
      $diffFileControl = join '',$ecgdir,'/electrode_vecg_xyz.control.dat';
      open ECG1,$ecgfile1;
      open ECG2,$ecgfile2;
      open ECG3,$ecgfile3;
      open ECG4,$ecgfile4;
      open ECGDIFF,">$diffFileControl";
      $dcnt = 0;
      while (my $line1 = <ECG1>)
      {
         my $line2 = <ECG2>;
         my $line3 = <ECG3>;
         my $line4 = <ECG4>;
         chomp $line1;
         chomp $line2;
         chomp $line3;
         chomp $line4;
         my $xval = $line2 - $line4;
         my $yval = $line2 - $line1;
         my $zval = $line2 - $line3;
         if ($dcnt >= $dataStart && $dcnt <= $dataEnd)
         {
            print ECGDIFF "$xval   $yval   $zval\n";
         }
         $dcnt++;
      }
      close ECGDIFF;
      close ECG1;
      close ECG2;
      close ECG3;
      close ECG4;
   }


   foreach $plane ("XY", "YZ", "XZ")
   {

      my $bxy;
      if ($plane eq "XY")
      {
         $bxy = "1:2";
         $xlab = "X (mV)";
         $ylab = "Y (mV)";
      }
      elsif ($plane eq "YZ")
      {
         $bxy = "2:3";
         $xlab = "Y (mV)";
         $ylab = "Z (mV)";
      }
      elsif ($plane eq "XZ")
      {
         $bxy = "1:3";
         $xlab = "X (mV)";
         $ylab = "Z (mV)";
      }

      my $filebase = "$ecgdir/ecg-$thisdir";
      $filebase = join '',$filebase,'-vececg',$plane;

      my $batchfile = join '',$filebase,'.bat';
      open BATCH,">$batchfile";
      print BATCH "\# xmgrace batch file for plotting ecg data\n\n";
      print BATCH "\n";

      # format each set
      my $xmgrargs = '';

      print BATCH "s0 legend \"$plane, beat $beatnum\"\n";
      print BATCH "s0 line linewidth $linewidth\n";
      print BATCH "s0 errorbar linewidth $linewidth\n";
      print BATCH "s0 errorbar riser linewidth $linewidth\n";
         
      $xmgrargs = join ' ',$xmgrargs,'-block',$diffFile,'-bxy',$bxy;

      if ($controlFound == 1 && $plotControl == 1)
      {
         print BATCH "s1 legend \"control\"\n";
         print BATCH "s1 line linewidth $controlline\n";
         print BATCH "s1 errorbar linewidth $controlline\n";
         print BATCH "s1 errorbar riser linewidth $controlline\n";
         print BATCH "s1 color \"red\"\n";

         $xmgrargs = join ' ',$xmgrargs,'-block',$diffFileControl,'-bxy',$bxy;
      }

      print BATCH "legend 0.7, 0.9\n";
      print BATCH "\n";
      print BATCH "\# format axes\n";
      print BATCH "\n";
      print BATCH "subtitle \"$fulldir\"\n";
      print BATCH "subtitle size $textsize\n";
      print BATCH "xaxis label \"$xlab\"\n";
      print BATCH "xaxis  label char size $textsize\n";
      print BATCH "xaxis  tick major 100\n";
      print BATCH "xaxis  tick minor ticks 4\n";
      print BATCH "\n";
      print BATCH "yaxis label \"$ylab\"\n";
      print BATCH "yaxis  label char size $textsize\n";
      print BATCH "yaxis  tick minor ticks 4\n";
      print BATCH "\n";
      print BATCH "\# line widths\n";
      print BATCH "xaxis bar linewidth $linewidth\n";
      print BATCH "xaxis tick major linewidth $linewidth\n";
      print BATCH "xaxis tick minor linewidth $linewidth\n";
      print BATCH "yaxis bar linewidth $linewidth\n";
      print BATCH "yaxis tick major linewidth $linewidth\n";
      print BATCH "yaxis tick minor linewidth $linewidth\n";
      print BATCH "frame linewidth $linewidth\n";
      print BATCH "\n";
#      print BATCH "\# set scale\n";
#      print BATCH "world xmin 0\n";
#      print BATCH "world xmax $xmax\n";
      print BATCH "autoscale\n";
      print BATCH "page size $pagesize $pagesize\n";
      print BATCH "view 0.1, 0.1, 0.95, 0.95\n";
      print BATCH "\n";
      close BATCH;

      $pngfile = join '',$filebase,'.png';

      if ($interactive == 1)
      {
         system("xmgrace $xmgrargs -batch $batchfile");
      }
      else
      {
         system("xmgrace $xmgrargs -batch $batchfile -nosafe -hardcopy -printfile $pngfile -hdevice PNG");
      }

      unlink($batchfile);
   }
}
