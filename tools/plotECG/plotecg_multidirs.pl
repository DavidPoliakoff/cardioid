#! /usr/bin/perl -w

# plotecg_multidirs.pl plots the ecgs generated by Cardioid and saves them to file, with 
# data from all directories on a single plot per lead
# Each directory should contain:
#   - electrode_list.txt : list of electrodes
#   - object.data : simulation parameters
#   - electrode#000123456 : file containing ecg data for each electrode
#
# written by Erik Draeger, LLNL, 01/07/2014

$interactive = 0;  # set to 1 to spawn xmgrace windows instead of plotting to file
$graphNBeats = 1;  # number of BCLs to show in each graph

if ($#ARGV < 0) {
   print "syntax:  plotecg_multidirs.pl [directories with simulation and ecg data]\n";
   exit;
}

# input filenames
$objectfile = "object.data";
$electrodeList = "electrode_list.txt";
$electrodeBase = "electrode\#";

# ecg electrode map
$electrodeName[0] = "V1";
$electrodeName[1] = "V2";
$electrodeName[2] = "V3";
$electrodeName[3] = "V4";
$electrodeName[4] = "V5";
$electrodeName[5] = "V6";
$electrodeName[6] = "I";
$electrodeName[7] = "I";
$electrodeName[8] = "vec1";
$electrodeName[9] = "vec2";
$electrodeName[10] = "vec3";
$electrodeName[11] = "vec4";

$firstdir = $ARGV[0];

print "Processing $firstdir...\n";
if (-e $firstdir)
{
   # read simulation parameters from object.data file
   ($dt,$unit) = grabTimestep("$firstdir/$objectfile");
   if ($dt < 0)
   {
      print "Error reading time step from $objectfile.\n";
      exit;
   }
   if ($unit eq "us")
   {
      $unit = "ms";
      $dt /= 1000;
   }
   elsif ($unit eq "s")
   {
      $unit = "ms";
      $dt *= 1000;
   }
   $printRate = grabECGPrintRate("$firstdir/$objectfile");
   if ($printRate < 0)
   {
      print "Error reading ECG print rate from $objectfile.\n";
      exit;
   }

   $BCL = grabMinStimPeriod("$firstdir/$objectfile");     # BCL should be in ms
   if ($BCL < 0)
   {
      print "Error reading BCL from $objectfile.\n";
      exit;
   }

   $rescaleFactor = $printRate*$dt;
   
   # open electrode files, count lines
   $electrodeListFull = "$firstdir/$electrodeList";
   if (-e $electrodeListFull)
   {
      open ELIST,$electrodeListFull or die "Error opening $electrodeListFull: $!\n";;
      $ecnt = 0;
      while ($line=<ELIST>)
      {
         chomp $line;
         $enum = $line;
         $enum_list[$ecnt] = $line;
         $efiles[$ecnt] = sprintf("$firstdir/$electrodeBase%9.9i",$enum);
         if (-e $efiles[$ecnt])
         {
            open ETRODE,$efiles[$ecnt];
            $linecnt = 0;
            while (<ETRODE>)
            {
               $linecnt++;
            }
            close ETRODE;
            $elen[$ecnt] = $linecnt;
            $ecnt++;
         }
         else
         {
            print "Error:  file $efiles[$ecnt] not found!\n";
         }
      }
      close ELIST;
   }
   else
   {
      print "Error:  file $electrodeListFull not found!\n";
      exit;
   }

   # for each lead V1-V6, plot last two beats in ecg file on top of each other
   for (my $ii=0; $ii<6; $ii++)
   {
      $nbeats = int $elen[$ii]*$rescaleFactor/$BCL;
      @ecgsets = ($ii,$nbeats,$graphNBeats);
      plotMultiDirGraceBatch(@ecgsets);
   }

   # calculate difference of leads 7 and 8
   $nbeats = int $elen[6]*$rescaleFactor/$BCL;
   #@ecgsets = (-6,$nbeats-1,$graphNBeats,-7,$nbeats,$graphNBeats);
   @ecgsets = (-6,$nbeats,$graphNBeats,-7,$nbeats,$graphNBeats);
   plotMultiDirGraceBatch(@ecgsets);      

   for (my $ii=8; $ii<$ecnt; $ii++)
   {
      $nbeats = int $elen[$ii]*$rescaleFactor/$BCL;
      @ecgsets = ($ii,$nbeats,$graphNBeats);
      plotMultiDirGraceBatch(@ecgsets);
   }

}
else
{
   print "Error:  directory $firstdir not found!\n";
   exit;
}

#################################################################################
sub grabTimestep
{
   my ($object) = @_;
   my $val = -1;
   open OBJ,$object;
   while ($line = <OBJ>)
   {
      @data = split ' ',$line;
      if ($#data > 0)
      {
         if ($data[0] eq 'dt')
         {
            $val = $data[2];
            $unit = $data[3];         
            $unit =~ s/\;//g;  # remove semicolon
         }
      }
   }
   return ($val,$unit);
}

#################################################################################
sub grabECGPrintRate
{
   my ($object) = @_;
   my $val = -1;
   open OBJ,$object;
   $inSensor = 0;
   while ($line = <OBJ>)
   {
      @data = split ' ',$line;
      if ($#data > 1)
      {
         if ($data[0] eq 'method' && $data[2] =~ "VoronoiCoarsening")
         {
            $inSensor = 1;
         }
         if ($inSensor == 1)
         {
            if ($data[0] eq '}') { $inSensor = 0; }
            if ($data[0] eq 'printRate')
            {
               $val = $data[2];
               $val =~ s/\;//g;  # remove semicolon
            }
         }
      }
   }
   return ($val);
}

#################################################################################
sub grabMinStimPeriod
{
   my ($object) = @_;
   my $val = -1;
   open OBJ,$object;
   $inStimulus = 0;
   while ($line = <OBJ>)
   {
      @data = split ' ',$line;
      if ($#data > 0)
      {
         if ($data[1] eq 'STIMULUS')
         {
            $inStimulus = 1;
         }
         if ($inStimulus == 1)
         {
            if ($data[0] eq '}') { $inStimulus = 0; }
            elsif ($data[0] eq 'period')
            {
               $data[2] =~ s/\;//g;  # remove semicolon
               if ($data[2] < $val || $val < 0)
               {
                  $val = $data[2];
               }
            }
         }
      }
   }
   return ($val);
}

#################################################################################
sub plotMultiDirGraceBatch
{
   my $linewidth = 3.0;
   my $textsize = 2.0;

   my @inputsets = @_;
   my $difference = 0;

   my $fulldir = `pwd`;
   chomp $fulldir;

   my $ncurves = ($#inputsets+1)/3;
   my $filebase = join '',"ecg-multi-BCL",$BCL,"-",($#ARGV+1),"dirs";
   for (my $ii=0; $ii<$ncurves; $ii++)
   {
      my $leadnum = $inputsets[3*$ii];
      if ($leadnum < 0)
      {
         $leadnum *= -1;
         $inputsets[3*$ii] *= -1;
         if ($ncurves == 2)
         {
            $difference = 1;
            # if beatnum is the same for both sets, just show one curve
            if ($inputsets[1] == $inputsets[4])
            {
               $ncurves--;
               $inputsets[3*$ii+3] *= -1;
            }
         }
      }
      my $leadname = $electrodeName[$leadnum];
      $filebase = join '-',$filebase,$leadname;
   }

   my $batchfile = join '',$filebase,'.bat';
   open BATCH,">$batchfile";
   print BATCH "\# xmgrace batch file for plotting ecg data\n\n";
   print BATCH "\n";

   my $setcnt = 0;
   my $xmgrargs = '';
   my $xmax = 0;

#ERIK:  THIS LOOP IS WRONG
   ECGDIR: foreach $ecgdir (@ARGV[0..$#ARGV]) 
   {  

      if ($difference == 1)
      {
         my $lead1 = $inputsets[0];
         my $enum1 = $enum_list[$lead1];
         my $ecgfile1 = sprintf("$ecgdir/$electrodeBase%9.9i",$enum1);
         my $lead2 = $inputsets[3];
         my $enum2 = $enum_list[$lead2];
         my $ecgfile2 = sprintf("$ecgdir/$electrodeBase%9.9i",$enum2);
         $diffFile = join '',$ecgdir,'/electrode_multi_lead1.dat';
         open ECG1,$ecgfile1;
         open ECG2,$ecgfile2;
         open ECGDIFF,">$diffFile" or die "Could not open diffFile $diffFile\n";
         while (my $line1 = <ECG1>)
         {
            my $line2 = <ECG2>;
            chomp $line1;
            chomp $line2;
            my $diffval = $line2 - $line1;
            print ECGDIFF "$diffval\n";
         }
         close ECGDIFF;
         close ECG1;
         close ECG2;
      }

      # format each set
      for (my $ii=0; $ii<$ncurves; $ii++)
      {
         my $leadnum = $inputsets[3*$ii];
         my $leadname = $electrodeName[$leadnum];
         my $beatnum = $inputsets[3*$ii+1];
         my $nbeatsToPlot = $inputsets[3*$ii+2];

         my $xmin = ($beatnum-1)*$BCL;
         my $tmpmax = $BCL*$nbeatsToPlot;
         if ($tmpmax > $xmax) { $xmax = $tmpmax; }
      
         print BATCH "\# format data (multiply by dt to rescale data from steps to seconds)\n";
         print BATCH "s$setcnt.x = s$setcnt.x + 1\n";
         print BATCH "s$setcnt.x = s$setcnt.x * $rescaleFactor\n";
         print BATCH "s$setcnt.x = s$setcnt.x - $xmin\n";
         print BATCH "s$setcnt legend \"$ecgdir, beat $beatnum\"\n";
         print BATCH "s$setcnt line linewidth $linewidth\n";
         print BATCH "s$setcnt errorbar linewidth $linewidth\n";
         print BATCH "s$setcnt errorbar riser linewidth $linewidth\n";
         
         if ($difference == 1)
         {
            $xmgrargs = join ' ',$xmgrargs,'-block',$diffFile,'-bxy index:1';
         }
         else
         {
            my $enum = $enum_list[$leadnum];
            $ecgdatafile = sprintf("$ecgdir/$electrodeBase%9.9i",$enum);
            $xmgrargs = join ' ',$xmgrargs,'-block',$ecgdatafile,'-bxy index:1';
         }
         $setcnt++;
      }
   }

   my $ynum = $inputsets[0];
   my $yname = $electrodeName[$ynum];

   print BATCH "legend 1.9, 0.85\n";
   print BATCH "\n";
   print BATCH "\# format axes\n";
   print BATCH "\n";
   print BATCH "subtitle \"$fulldir\"\n";
   print BATCH "subtitle size $textsize\n";
   print BATCH "xaxis label \"time ( $unit )\"\n";
   print BATCH "xaxis  label char size $textsize\n";
   print BATCH "xaxis  tick major 100\n";
   print BATCH "xaxis  tick minor ticks 4\n";
   print BATCH "\n";
   print BATCH "yaxis label \"ecg lead $yname\"\n";
   print BATCH "yaxis  label char size $textsize\n";
   print BATCH "yaxis  tick minor ticks 4\n";
   print BATCH "\n";
   print BATCH "\# line widths\n";
   print BATCH "xaxis bar linewidth $linewidth\n";
   print BATCH "xaxis tick major linewidth $linewidth\n";
   print BATCH "xaxis tick minor linewidth $linewidth\n";
   print BATCH "yaxis bar linewidth $linewidth\n";
   print BATCH "yaxis tick major linewidth $linewidth\n";
   print BATCH "yaxis tick minor linewidth $linewidth\n";
   print BATCH "frame linewidth $linewidth\n";
   print BATCH "\n";
   print BATCH "\# set scale\n";
   print BATCH "world xmin 0\n";
   print BATCH "world xmax $xmax\n";
   print BATCH "autoscale onread yaxes\n";
   print BATCH "page size 1260, 480\n";
   print BATCH "view 0.13, 0.13, 2.55, 0.90\n";
   print BATCH "\n";
   close BATCH;

   $pngfile = join '',$filebase,'.png';

   #print "ncurves = $ncurves, xmgrargs = $xmgrargs\n";

   if ($interactive == 1)
   {
      system("xmgrace $xmgrargs -batch $batchfile");
   }
   else
   {
      system("xmgrace $xmgrargs -batch $batchfile -nosafe -hardcopy -printfile $pngfile -hdevice PNG");
   }

#   unlink($batchfile);

}
