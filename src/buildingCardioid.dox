/*!

@page pg_building_cardioid Building Cardioid



@section sec_building_cardioid Building Cardioid

Cardioid has been designed to be portable to a wide variety of systems.
If you are building on a system that is recognized by the build system
you should only have to enter the src directory and type make.  The next
few paragraphs describe the procedure to follow if your build host is
not recognized.

Cardioid's build system uses a hostname based configuration system
rather than an architecture based configuration (i.e., uname or
similar).  Over the years we have found that using hostnames allows us
to easily work around subtle hardware or environmental difference that
are hard to detect otherwise.  We also find that the number of build
hosts is relatively small so this system is easy to maintain, especially
compared to the complexity of a tool like autoconf.

To configure the build system for a new host, edit
@path{src/Makefile.arch} and add a conditional block for your build
host.  Note that we trim trailing digits from the host name to account
for the fact that many clusters have several front-end nodes with names
that differ only by trailing digits.  If your host is sufficiently
similar to one that is already configured you may be able to use one of
the existing values for ARCHGUESS.  If not, you will need to specify a
new value and create the corresponding @path{.mk} file with the
characteristics of your build host.  Use one of the existing files as a
guide.

@subsection subsec_build_targets Build Targets

The default cardioid build target is an optimized binary.  This binary
will be placed in @path{../bin} relative to the @path{src} directory.

Several other build targets exist:

- **debug**  Builds a binary with debugging information.  Optimizations are
             disabled to make debugging easier.
- **profile** Builds a binary that will generate profiling information
              suitable for use with gprof.
- **clean**  Deletes many of the files generated by the build include
             object files and binaries.
- **distclean** Deletes all files generated by the build.
- **ddcMD_dist** Useful for ddcMD developers.  See
                 subsection @ref subsec_relationship_to_ddcmd.


@subsection subsec_relationship_to_ddcmd Relationship to ddcMD

Cardioid uses a number of source code files that are developed and
maintained as part of ddcMD.  For various reasons, these files have
never been organized into a separately maintained library.  This makes
it a challenge to use these files in the Cardioid build.  If you are not
a ddcMD developer, the build system takes care of just about everything.
The only things you need to know about ddcMD are:

-#  The files in the @path{src/ddcMD_files} subdirectory are generated
    files and you should not change them.  
-#  You should not put files in @path{src/ddcMD_files} since this
    directory is deleted by the distclean target of make.
-#  The files that Cardioid needs from ddcMD are distributed as a
    compressed tar file as part of the source code distribution.
    Occaisionally this distribution needs updating.  When this happens you
    will need to make distclean to erase stale files.  Whenever you see
    build errors after an svn update your first reaction should always be
    to make distclean.

If you are a ddcMD developer, especially if you make changes to the
files that are used by Cardioid, you should understand how Cardioid
interacts with ddcMD, how to safely make changes to ddcMD files, and how
to update the tar file in the Carioid distributon that contains ddcMD
files.

All of the ddcMD files used by Cardioid are listed in the DDCMD_FILES
variable in the Cardioid Makefile.  The Cardioid build system creates
symbolic links to all of these files and then processes them as if they
were regular source files in the @path{src} directory.  The script
@path{mkLinks_ddcMD.sh} is responsible for creating the symbolic links.
It is automatically invoked by make when necessary.  
Developers of ddcMD should keep a ddcMD source tree in one of the
locations listed in the search path in @path{mkLinks_ddcMD.sh}.  This
will ensure that the symbolic links in the Cardioid source tree are
pointing at active ddcMD sources that are under version control.

If it is necessary to modify the ddcMD sources that are used by
Cardioid, the changes should be made in the linked ddcMD source tree.
Once a developer is satisfied the changes are correct the following
procedure is used to create the new tar file that other Cardioid
developers and users will need.  Don't skip steps.

-#  Confirm that both Cardioid and ddcMD build and function correctly
    with the changes.
-#  Use svn to commit the changed ddcMD code to the ddcMD repository.
-#  Update your ddcMD sources.  
-#  Ensure that the svnversion command returns a single number without
    a trailing "M" or a pair of numbers separated by a ":".  (If it
    does, you skipped a step.)
-#  In the Cardioid build directory do make distclean and make
    ddcMD_dist.  You should now have two compressed tar files with names
    like ddcMD_files_rXXXX.tgz where XXXX is an svn revision number.
-#  Do svn rm on the older .tgz file to remove it from the
    distribution, and svn add on the new .tgz file.  
-#  Commit your changes to the Cardioid repository.
-#  Consider sending an email reminding other users that they will
    need to do make distclean when they update.


*/
