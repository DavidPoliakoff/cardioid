1.  The Anatomy class is totally undefined, and is never filled with
data.

2.  The polymorphic pointers like Diffusion* in the Simulate class and
Conductivity* in the diffusion classes should be wrapped in a
templatized goody so that the default copy constructor, destructor, etc
will just work.

3.  It would really be better if the fibre orientation angles were
converted to a double (radians) when they are read in and the
conductivity models don't have to worry about the conversion.

4.  The grid spacing (in m) appears to be read from input.  Shouldn't
this travel with the anatomy data?  Where do the values that were used
in the test run from IBM come from.  They input deck contains no setting.

5.  I don't quite understand why I have to explicity cast calls to
Array3D::cArray() to const.  See for example
Saleheen98PrecomputeDiffusion::precomputeCoefficients.  I know that the
return value isn't used in determining the overload resolution....

6.  There is output in FibreConductivity.cc that isn't screened for rank

7.  Be more careful about initializations in
Saleheen98PrecomputeDiffusion:initializeLocalGridInfo

8.  There is something wrong with the Makefile.  Stuff doesn't rebuild
when headers are touched.

9.  Do something about the long comment in Conductivity.hh

10.  Initialization of Voltages

11.  initialization/filtering of cell types, including the use of type 9
and type 0

12.  Do we need to think about the fact that the reading process in
BlueBeats completely populates certain blocks such as tissue (and
probably conductivity)

13.  Base classes need virtual destructors

14.  The process of creating a HaloExchange from a GridRouter involves a
great deal of copying data.  This could be improved.

15.  I really don't like the way the Simulate class is turning out.  In
particular the fact that it owns things like GridRouter and
HaloExchange<double> voltageExchange that can't be easily initialized in
the constructor is a problem.

16.  There is way too much conversion from gids to tuples going on.
Should think about the right time to ditch the gids and just store
tuples.

17.  We allow multiple stimulus objects, but if two objects happen to
stimulate the same cell the last guy wins.  Is this what we want?  Also,
if stimuli are additive we need to zero the external stimulus every time
step.


18.  The conductivity classes don't know anything about cell type.  In
BlueBeats there are explicit checks to make sure that we're only
computing conductivities for tissue cell.  No such check here.  In fact,
I'm worried that we don't handle default values for conductivities
prperly as a result.

19.  The system for using the JHU model for conductivities isn't the
same as in BlueBeats.  In BB we use a parameter on the anatomy reader
(sort of) to determine whether to read the angles.  Here, we need to set
the type of the CONDUCTIVITY object.  Should there be some kind of magic
system that turns on the JHU model if the fiber angles can't be found?

20.  There is a fudge factor of 1e-5 added to the radius of a domain
in GridRouter when determining whether a cell is inside the domain.  I'd
feel better if there was a meaningful length scale attached to the fudge.

22.  The size of the simulation cell is stored in both Simulate and
Anatomy.  This is trouble waiting to happen.

23.  Why does the PointListSensor have a collection of pointers to
streams instead of just a collection of streams?  With just streams we
don't need a non-default destructor.

24.  What are reasonable defaults for the printRate and evalRate of a
Sensor?

25.  It might be nice if the ActivationTimeSensor had a printrate in ms
instead of timesteps.  What about the other print/eval rate functions?
should they be in steps or in msec?

26.  We're going down the road of making all of the Sensors depend on
the cell order in the Anatomy.  Do we want to think about rebuilding all
of the Sensors if the Anatomy changes?

27.  How is the PointListSensor's output organized?  Should we use
snapshot directories?  Should each Sensor go in its own special purpose
directory?

28.  Loop count is currently an int.  Do we need to make it long long?

29.  Figure out arch dependent build stuff.  In particular, the code
that is inherited from ddcMD has some expectations about what the
-D$(ARCH) macros should look like and I don't think we're doing the righ
thing at present
