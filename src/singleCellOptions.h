/** @file singleCellOptions.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef SINGLECELLOPTIONS_H
#define SINGLECELLOPTIONS_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "cardiodSingleCell"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "cardiodSingleCell"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char ** object_arg;	/**< @brief Object file.  */
  char ** object_orig;	/**< @brief Object file original value given at command line.  */
  unsigned int object_min; /**< @brief Object file's minimum occurreces */
  unsigned int object_max; /**< @brief Object file's maximum occurreces */
  const char *object_help; /**< @brief Object file help description.  */
  char * method_arg;	/**< @brief Method name (or module name).  */
  char * method_orig;	/**< @brief Method name (or module name) original value given at command line.  */
  const char *method_help; /**< @brief Method name (or module name) help description.  */
  char * reaction_name_arg;	/**< @brief Name of reaction in object file.  */
  char * reaction_name_orig;	/**< @brief Name of reaction in object file original value given at command line.  */
  const char *reaction_name_help; /**< @brief Name of reaction in object file help description.  */
  double dt_arg;	/**< @brief Timestep for the simulation (default='0.020').  */
  char * dt_orig;	/**< @brief Timestep for the simulation original value given at command line.  */
  const char *dt_help; /**< @brief Timestep for the simulation help description.  */
  double duration_arg;	/**< @brief Duration of the simulation.  */
  char * duration_orig;	/**< @brief Duration of the simulation original value given at command line.  */
  const char *duration_help; /**< @brief Duration of the simulation help description.  */
  char * save_state_file_arg;	/**< @brief Filename to save the state to.  */
  char * save_state_file_orig;	/**< @brief Filename to save the state to original value given at command line.  */
  const char *save_state_file_help; /**< @brief Filename to save the state to help description.  */
  double save_state_time_arg;	/**< @brief Time to save the state.  */
  char * save_state_time_orig;	/**< @brief Time to save the state original value given at command line.  */
  const char *save_state_time_help; /**< @brief Time to save the state help description.  */
  double output_dt_arg;	/**< @brief Output timetep (default='1').  */
  char * output_dt_orig;	/**< @brief Output timetep original value given at command line.  */
  const char *output_dt_help; /**< @brief Output timetep help description.  */
  char ** add_column_arg;	/**< @brief Add a column of output.  */
  char ** add_column_orig;	/**< @brief Add a column of output original value given at command line.  */
  unsigned int add_column_min; /**< @brief Add a column of output's minimum occurreces */
  unsigned int add_column_max; /**< @brief Add a column of output's maximum occurreces */
  const char *add_column_help; /**< @brief Add a column of output help description.  */
  int add_all_state_flag;	/**< @brief Add all possible states to the output (default=off).  */
  const char *add_all_state_help; /**< @brief Add all possible states to the output help description.  */
  int add_header_flag;	/**< @brief Add a header row to stdout (default=off).  */
  const char *add_header_help; /**< @brief Add a header row to stdout help description.  */
  int s1_count_arg;	/**< @brief Number of s1 stimulii (default='1').  */
  char * s1_count_orig;	/**< @brief Number of s1 stimulii original value given at command line.  */
  const char *s1_count_help; /**< @brief Number of s1 stimulii help description.  */
  double s1_bcl_arg;	/**< @brief Basic cycle length (default='1000').  */
  char * s1_bcl_orig;	/**< @brief Basic cycle length original value given at command line.  */
  const char *s1_bcl_help; /**< @brief Basic cycle length help description.  */
  double s1_offset_arg;	/**< @brief Time to start s1 stimulii (default='0').  */
  char * s1_offset_orig;	/**< @brief Time to start s1 stimulii original value given at command line.  */
  const char *s1_offset_help; /**< @brief Time to start s1 stimulii help description.  */
  double* stim_at_arg;	/**< @brief Stimulate at the following time in ms.  */
  char ** stim_at_orig;	/**< @brief Stimulate at the following time in ms original value given at command line.  */
  unsigned int stim_at_min; /**< @brief Stimulate at the following time in ms's minimum occurreces */
  unsigned int stim_at_max; /**< @brief Stimulate at the following time in ms's maximum occurreces */
  const char *stim_at_help; /**< @brief Stimulate at the following time in ms help description.  */
  double stim_strength_arg;	/**< @brief Strength of the stimulus (default='60').  */
  char * stim_strength_orig;	/**< @brief Strength of the stimulus original value given at command line.  */
  const char *stim_strength_help; /**< @brief Strength of the stimulus help description.  */
  double stim_duration_arg;	/**< @brief Duration of the stimulus (default='1').  */
  char * stim_duration_orig;	/**< @brief Duration of the stimulus original value given at command line.  */
  const char *stim_duration_help; /**< @brief Duration of the stimulus help description.  */
  int num_points_arg;	/**< @brief Number of points to stimulate (default='1').  */
  char * num_points_orig;	/**< @brief Number of points to stimulate original value given at command line.  */
  const char *num_points_help; /**< @brief Number of points to stimulate help description.  */
  int alternate_update_flag;	/**< @brief Use updateGates/nonGates formulation. (default=off).  */
  const char *alternate_update_help; /**< @brief Use updateGates/nonGates formulation. help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int object_given ;	/**< @brief Whether object was given.  */
  unsigned int method_given ;	/**< @brief Whether method was given.  */
  unsigned int reaction_name_given ;	/**< @brief Whether reaction-name was given.  */
  unsigned int dt_given ;	/**< @brief Whether dt was given.  */
  unsigned int duration_given ;	/**< @brief Whether duration was given.  */
  unsigned int save_state_file_given ;	/**< @brief Whether save-state-file was given.  */
  unsigned int save_state_time_given ;	/**< @brief Whether save-state-time was given.  */
  unsigned int output_dt_given ;	/**< @brief Whether output-dt was given.  */
  unsigned int add_column_given ;	/**< @brief Whether add-column was given.  */
  unsigned int add_all_state_given ;	/**< @brief Whether add-all-state was given.  */
  unsigned int add_header_given ;	/**< @brief Whether add-header was given.  */
  unsigned int s1_count_given ;	/**< @brief Whether s1-count was given.  */
  unsigned int s1_bcl_given ;	/**< @brief Whether s1-bcl was given.  */
  unsigned int s1_offset_given ;	/**< @brief Whether s1-offset was given.  */
  unsigned int stim_at_given ;	/**< @brief Whether stim-at was given.  */
  unsigned int stim_strength_given ;	/**< @brief Whether stim-strength was given.  */
  unsigned int stim_duration_given ;	/**< @brief Whether stim-duration was given.  */
  unsigned int num_points_given ;	/**< @brief Whether num-points was given.  */
  unsigned int alternate_update_given ;	/**< @brief Whether alternate-update was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SINGLECELLOPTIONS_H */
